generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String        @id @default(cuid())
  stripeSubscriptionId String?       @map("stripe_subscription_id")
  telegramUserId       BigInt        @unique @map("telegram_user_id")
  telegramChatId       BigInt        @map("telegram_chat_id")
  hasCompletedSetup    Boolean       @default(false) @map("has_completed_setup")
  openaiThreadId    String           @map("openai_thread_id")
  createdAt            DateTime      @default(now()) @map("created_at")

  // Relaciones
  contacts    Contact[]
  reminders   Reminder[]
  messageLogs MessageLog[]
  sessions    Session[]

  @@map("users")
}

model Contact {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  name      String   @db.VarChar(100)
  relation  String?  @db.VarChar(100)
  location  String?  @db.VarChar(150)
  embedding Json?    // Para almacenar el vector de búsqueda semántica
  createdAt DateTime @default(now()) @map("created_at")

  // Relaciones
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  events     Event[]
  reminders  Reminder[]
  messageLogs MessageLog[]

  @@map("contacts")
}

model Event {
  id          String    @id @default(uuid())
  contactId   String    @map("contact_id")
  description String
  eventDate   DateTime? @map("event_date")
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relaciones
  contact     Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@map("events")
}

model Reminder {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  contactId String?  @map("contact_id")
  message   String
  remindAt  DateTime @map("remind_at")
  createdAt DateTime @default(now()) @map("created_at")
  completed Boolean  @default(false)

  // Relaciones
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  contact Contact? @relation(fields: [contactId], references: [id], onDelete: SetNull)

  @@map("reminders")
}

model MessageLog {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  contactId String?  @map("contact_id")
  message   String
  direction String   @db.VarChar(10)
  createdAt DateTime @default(now()) @map("created_at")

  // Relaciones
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  contact Contact? @relation(fields: [contactId], references: [id], onDelete: SetNull)

  @@map("message_logs")
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}